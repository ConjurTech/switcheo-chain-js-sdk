import * as bip32 from 'bip32';
import * as bip39 from 'bip39';
import fetch from 'node-fetch';
import { CONFIG, NETWORK } from './config';
import { Fee, StdSignDoc } from './containers';
import { marshalJSON } from './utils/encoder';
import { getPath, PrivKeySecp256k1 } from './utils/wallet';
export class Wallet {
    constructor(privateKey, accountNumber, network) {
        const privKey = new PrivKeySecp256k1(Buffer.from(privateKey, 'hex'));
        this.privKey = privKey;
        this.address = privKey.toPubKey().toAddress().toBytes();
        this.pubKeySecp256k1 = privKey.toPubKey();
        this.pubKeyBase64 = this.pubKeySecp256k1.pubKey.toString('base64');
        this.pubKeyBech32 = this.pubKeySecp256k1.toAddress().toBech32('cosmos');
        this.gas = CONFIG.DEFAULT_GAS;
        this.accountNumber = accountNumber;
        this.network = network;
    }
    static async connect(privateKey, net = 'LOCALHOST') {
        const network = NETWORK[net];
        if (!network) {
            throw new Error('network must be LOCALHOST/DEVNET');
        }
        const pubKeyBech32 = new PrivKeySecp256k1(Buffer.from(privateKey, 'hex')).toPubKey().toAddress().toBech32('cosmos');
        const { result: { value } } = await fetch(`${network.REST_URL}/auth/accounts/${pubKeyBech32}`)
            .then(res => res.json());
        console.log(value.account_number, value.account_number, value.account_number);
        return new Wallet(privateKey, value.account_number, network);
    }
    sign(message) {
        const privKey = this.privKey;
        const data = privKey.sign(message);
        const signatureBase64 = data.toString('base64');
        return {
            pub_key: {
                type: 'tendermint/PubKeySecp256k1',
                value: this.pubKeyBase64,
            },
            signature: signatureBase64,
        };
    }
    broadcast(body) {
        return fetch(`${this.network.REST_URL}/txs`, { method: 'POST', body: JSON.stringify(body) })
            .then(res => res.json()); // expecting a json response
    }
    getAccount() {
        return fetch(`${this.network.REST_URL}/auth/accounts/${this.pubKeyBech32}`)
            .then(res => res.json()); // expecting a json response
    }
    async signMessage(msg, options = {}) {
        let sequence = options.sequence;
        if (!sequence) { // no sequence override, we get latest from blockchain
            const { result } = await this.getAccount();
            sequence = result.value.sequence;
        }
        console.log('====================================');
        console.log(this.accountNumber);
        console.log(CONFIG.CHAIN_ID);
        console.log('====================================');
        const memo = options.memo || '';
        const stdSignMsg = new StdSignDoc({
            accountNumber: this.accountNumber,
            chainId: CONFIG.CHAIN_ID,
            fee: new Fee([], this.gas),
            memo,
            msgs: [
                msg,
            ],
            sequence,
        });
        return this.sign(marshalJSON(stdSignMsg));
    }
}
export function newAccount() {
    const mnemonic = bip39.generateMnemonic();
    return {
        mnemonic,
        privateKey: getPrivKeyFromMnemonic(mnemonic),
    };
}
export function getPrivKeyFromMnemonic(mnemonic) {
    const path = getPath();
    const seed = bip39.mnemonicToSeedSync(mnemonic, '');
    const masterKey = bip32.fromSeed(seed);
    const hd = masterKey.derivePath(path);
    const privateKey = hd.privateKey;
    if (!privateKey) {
        throw new Error("null hd key");
    }
    return privateKey.toString('hex');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi93YWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDOUIsT0FBTyxLQUFLLE1BQU0sWUFBWSxDQUFBO0FBQzlCLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFXLE1BQU0sVUFBVSxDQUFBO0FBQ25ELE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFtQixNQUFNLGdCQUFnQixDQUFBO0FBSTNFLE1BQU0sT0FBTyxNQUFNO0lBdUJqQixZQUFZLFVBQVUsRUFBRSxhQUFhLEVBQUUsT0FBTztRQUM1QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFFcEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDdkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDekMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDbEUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN2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